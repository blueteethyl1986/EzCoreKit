<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EzCoreKit</name>
    </assembly>
    <members>
        <member name="M:EzCoreKit.Cryptography.HashFactory.ToHash``1(System.String)">
            <summary>
            將字串使用指定的雜湊演算法轉換為雜湊
            </summary>
            <typeparam name="Algorithm">雜湊演算法型別</typeparam>
            <param name="value">值</param>
            <returns>雜湊Binary</returns>
        </member>
        <member name="M:EzCoreKit.Cryptography.HashFactory.ToHashString``1(System.String,System.Boolean)">
            <summary>
            將字串使用指定的雜湊演算法轉換為雜湊後在轉換為16進位字串表示
            </summary>
            <typeparam name="Algorithm">雜湊演算法型別</typeparam>
            <param name="value">值</param>
            <param name="upper">是否轉換為大寫</param>
            <returns>雜湊字串</returns>
        </member>
        <member name="M:EzCoreKit.Cryptography.StringHashExtension.ToHash``1(System.String)">
            <summary>
            將字串使用指定的雜湊演算法轉換為雜湊
            </summary>
            <typeparam name="Algorithm">雜湊演算法型別</typeparam>
            <param name="value">值</param>
            <returns>雜湊Binary</returns>
        </member>
        <member name="M:EzCoreKit.Cryptography.StringHashExtension.ToHashString``1(System.String,System.Boolean)">
            <summary>
            將字串使用指定的雜湊演算法轉換為雜湊後在轉換為16進位字串表示
            </summary>
            <typeparam name="Algorithm">雜湊演算法型別</typeparam>
            <param name="value">值</param>
            <param name="upper">是否轉換為大寫</param>
            <returns>雜湊字串</returns>
        </member>
        <member name="M:EzCoreKit.Dynamic.ExpandoObjectFactory.ConvertToExpando(System.Object,System.Boolean)">
            <summary>
            將物件轉換為動態物件，僅欄位與屬性
            </summary>
            <param name="obj">目標物件</param>
            <param name="publicOnly">僅為public屬性與欄位</param>
            <returns>動態物件</returns>
        </member>
        <member name="M:EzCoreKit.Extensions.ArrayExtension.GetLengths(System.Array)">
            <summary>
            取得代表 <see cref="T:System.Array"/> 所有維度之元素數目的 32 位元整數。
            </summary>
            <param name="target"></param>
            <returns>32 位元的整數陣列，代表所有維度的元素數目。</returns>
        </member>
        <member name="M:EzCoreKit.Extensions.ArrayExtension.GetAllIndexes(System.Array)">
            <summary>
            取得代表 <see cref="T:System.Array"/> 所有元素的索引。
            </summary>
            <param name="target"></param>
            <returns>32 位元的整數陣列的物件清單，代表所有元素的索引。</returns>
        </member>
        <member name="M:EzCoreKit.Extensions.ArrayExtension.SetValue(System.Array,System.Object,System.Collections.Generic.List{System.Int32})">
            <summary>
            設定多維 System.Array 中指定位置之元素的值。索引已指定為 32 位元整數的List。
            </summary>
            <param name="obj"></param>
            <param name="value">指定元素的新值。</param>
            <param name="index">32 位元整數的List，代表指定要設定之元素位置的索引。</param>
        </member>
        <member name="M:EzCoreKit.Extensions.ArrayExtension.GetValue(System.Array,System.Collections.Generic.List{System.Int32})">
            <summary>
            取得多維 System.Array 中位於指定位置的值。索引已指定為 32 位元整數的List。
            </summary>
            <param name="obj"></param>
            <param name="index">32 位元整數的清單，代表索引，指定要取得的 System.Array 元素的位置。</param>
            <returns></returns>
        </member>
        <member name="M:EzCoreKit.Extensions.ArrayExtension.Full(System.Array,System.Object)">
            <summary>
            將輸入陣列填滿指定的值
            </summary>
            <param name="ary">目標陣列</param>
            <param name="value">指定數值</param>
        </member>
        <member name="M:EzCoreKit.Extensions.ArrayExtension.LCM(System.Int32[])">
            <summary>
            求陣列數值最小公倍數
            </summary>
        </member>
        <member name="M:EzCoreKit.Extensions.ArrayExtension.LCM(System.Int32,System.Int32)">
            <summary>
            求兩數值之最小公倍數
            </summary>
        </member>
        <member name="M:EzCoreKit.Extensions.ArrayExtension.GCD(System.Int32[])">
            <summary>
            求陣列數值之最大公因數
            </summary>
            <param name="ary">輸入陣列</param>
        </member>
        <member name="M:EzCoreKit.Extensions.ArrayExtension.GCD(System.Int32,System.Int32)">
            <summary>
            求兩數值之最大公因數
            </summary>
        </member>
        <member name="M:EzCoreKit.Extensions.DateTimeExtension.ToJsTime(System.DateTime)">
            <summary>
            轉換為Js時間表示
            </summary>
            <param name="datetime">時間</param>
            <returns>Js時間表示</returns>
        </member>
        <member name="M:EzCoreKit.Extensions.DateTimeFactory.ConvertToJsTime(System.DateTime)">
            <summary>
            轉換為Js時間表示
            </summary>
            <param name="datetime">時間</param>
            <returns>Js時間表示</returns>
        </member>
        <member name="M:EzCoreKit.Extensions.DateTimeFactory.ConvertFromJsTime(System.Int64)">
            <summary>
            自Js時間表示轉換
            </summary>
            <param name="jsTime">Js時間表示</param>
            <returns>時間</returns>
        </member>
        <member name="M:EzCoreKit.Extensions.EnumFactory.GetEnumName(System.Type,System.Object)">
            <summary>
            取得指定列舉值之名稱
            </summary>
            <param name="type">列舉類型</param>
            <param name="value">值</param>
            <returns>名稱</returns>
        </member>
        <member name="M:EzCoreKit.Extensions.EnumFactory.GetEnumName``1(``0)">
            <summary>
            取得指定列舉值名稱
            </summary>
            <typeparam name="T">列舉類型</typeparam>
            <param name="value">值</param>
            <returns>名稱</returns>
        </member>
        <member name="M:EzCoreKit.Extensions.EnumFactory.GetCustomAttributes(System.Type,System.Object)">
            <summary>
            取得自訂列舉欄位之<see cref="T:System.Attribute"/>集合
            </summary>
            <param name="type">列舉類型</param>
            <param name="value">值</param>
            <returns>Attribute集合</returns>
        </member>
        <member name="M:EzCoreKit.Extensions.EnumFactory.GetCustomAttribute(System.Type,System.Object)">
            <summary>
            取得自訂列舉欄位之<see cref="T:System.Attribute"/>
            </summary>
            <param name="type">列舉類型</param>
            <param name="value">值</param>
            <returns>Attribute</returns>
        </member>
        <member name="M:EzCoreKit.Extensions.EnumFactory.GetCustomAttributes``1(System.Object)">
            <summary>
            取得自訂列舉欄位之<see cref="T:System.Attribute"/>集合
            </summary>
            <typeparam name="TAttribute">列舉類型</typeparam>
            <param name="value">值</param>
            <returns>Attribute集合</returns>
        </member>
        <member name="M:EzCoreKit.Extensions.EnumFactory.GetCustomAttribute``1(System.Object)">
            <summary>
            取得自訂列舉欄位之<see cref="T:System.Attribute"/>
            </summary>
            <typeparam name="TAttribute">列舉類型</typeparam>
            <param name="value">值</param>
            <returns>Attribute</returns>
        </member>
        <member name="M:EzCoreKit.Extensions.HttpClientExtension.GetJsonAsync(System.Net.Http.HttpClient,System.String)">
            <summary>
            將 GET 要求傳送至指定的 URI，並透過非同步作業，以Json形式傳回回應內容
            </summary>
            <param name="client"></param>
            <param name="requestUri">傳送要求的目標 URI</param>
            <returns>操作結果</returns>
        </member>
        <member name="M:EzCoreKit.Extensions.HttpClientExtension.GetJsonAsync(System.Net.Http.HttpClient,System.Uri)">
            <summary>
            將 GET 要求傳送至指定的 URI，並透過非同步作業，以Json形式傳回回應內容
            </summary>
            <param name="client"></param>
            <param name="requestUri">傳送要求的目標 URI</param>
            <returns>操作結果</returns>
        </member>
        <member name="M:EzCoreKit.Extensions.ObjectExtension.ToExpando(System.Object,System.Boolean)">
            <summary>
            將物件轉換為動態物件，僅欄位與屬性
            </summary>
            <param name="obj">目標物件</param>
            <param name="publicOnly">僅為public屬性與欄位</param>
            <returns>動態物件</returns>
        </member>
        <member name="M:EzCoreKit.Extensions.ObjectExtension.ToBytes(System.Object)">
            <summary>
            自物件轉換為byte[]
            </summary>
        </member>
        <member name="M:EzCoreKit.Extensions.ObjectExtension.ToObject``1(System.Byte[])">
            <summary>
            自byte[]還原為目標型別參數
            </summary>
            <param name="bytes">資料來源</param>
        </member>
        <member name="M:EzCoreKit.Extensions.ObjectExtension.DeepClone(System.Object)">
            <summary>
            傳回這個物件的深層副本。
            </summary>
            <param name="target"></param>
            <returns>深層副本</returns>
        </member>
        <member name="M:EzCoreKit.Extensions.RandomExtension.NextDouble(System.Random,System.Double,System.Double)">
            <summary>
            隨機取指定數值內的double值
            </summary>
        </member>
        <member name="M:EzCoreKit.Extensions.RandomExtension.NextDouble(System.Random,System.Double)">
            <summary>
            隨機取得0到指定數值內的double值
            </summary>
        </member>
        <member name="M:EzCoreKit.Extensions.RandomExtension.NextBool(System.Random)">
            <summary>
            隨機取得bool值
            </summary>
        </member>
        <member name="M:EzCoreKit.Extensions.RandomExtension.NextEnum``1(System.Random)">
            <summary>
            隨機自列舉型別中取得值
            </summary>
        </member>
        <member name="M:EzCoreKit.Extensions.RandomExtension.NextEnum(System.Random,System.Type)">
            <summary>
            隨機自列舉型別中取得值
            </summary>
            <param name="type">目標型別</param>
        </member>
        <member name="M:EzCoreKit.Extensions.RandomExtension.NextString(System.Random,System.String[])">
            <summary>
            隨機自字串陣列中取得值
            </summary>
            <param name="data">目標字串</param>
        </member>
        <member name="M:EzCoreKit.Extensions.StreamExtension.ToBytes(System.IO.Stream)">
            <summary>
            串流轉換為byte[]
            </summary>
        </member>
        <member name="M:EzCoreKit.Extensions.StreamExtension.ToStream(System.Byte[])">
            <summary>
            byte[]轉換為串流
            </summary>
        </member>
        <member name="M:EzCoreKit.Extensions.StringAutoSpcesExtension.Spacing(System.String)">
            <summary>
            字串中不同語系文字中插入空白字元
            </summary>
            <param name="str">字串</param>
            <returns>自動加入空白後的字串</returns>
        </member>
        <member name="M:EzCoreKit.Extensions.StringExtension.IsMatch(System.String,System.String)">
            <summary>
            檢查字串是否符合表示式
            </summary>
            <param name="regexString">正規表示式</param>
        </member>
        <member name="M:EzCoreKit.Extensions.StringExtension.SplitByRegex(System.String,System.String)">
            <summary>
            使用正規表示式切割字串
            </summary>
            <param name="input">值</param>
            <param name="pattern">模式</param>
            <returns>切割結果</returns>
        </member>
        <member name="M:EzCoreKit.Extensions.StringExtension.SplitByRegex(System.String,System.String,System.Int32)">
            <summary>
            使用正規表示式切割字串
            </summary>
            <param name="input">值</param>
            <param name="pattern">模式</param>
            <param name="count">數量</param>
            <returns>切割結果</returns>
        </member>
        <member name="M:EzCoreKit.Extensions.StringExtension.SplitByRegex(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            使用正規表示式切割字串
            </summary>
            <param name="input">值</param>
            <param name="pattern">模式</param>
            <param name="count">數量</param>
            <param name="startat">起始索引</param>
            <returns>切割結果</returns>
        </member>
        <member name="M:EzCoreKit.Extensions.StringExtension.InnerString(System.String,System.String,System.String)">
            <summary>
            取得指定字串間的字串
            </summary>
            <param name="input">值</param>
            <param name="start">起始字串</param>
            <param name="end">結束字串</param>
            <returns>字串間的字串</returns>
        </member>
        <member name="M:EzCoreKit.Extensions.StringExtension.Spacing(System.String)">
            <summary>
            字串中不同語系文字中插入空白字元
            </summary>
            <param name="str">字串</param>
            <returns>自動加入空白後的字串</returns>
        </member>
        <member name="M:EzCoreKit.Extensions.TypeExtension.AllBaseTypes(System.Reflection.TypeInfo)">
            <summary>
            取得指定的類別繼承鍊所有的基礎類別
            </summary>
            <param name="Type">指定類別</param>
        </member>
        <member name="M:EzCoreKit.Extensions.TypeExtension.IsAnonymousType(System.Type)">
            <summary>
            確認目前類別是否為匿名型別
            </summary>
        </member>
        <member name="M:EzCoreKit.File.SecureDeleter.Delete(System.String,System.UInt32)">
            <summary>
            擦除內容後刪除檔案
            </summary>
            <param name="path">檔案路徑</param>
            <param name="overWriteTime">內容擦除次數，預設為一次</param>
        </member>
        <member name="M:EzCoreKit.NodaTime.InstantFactory.ConvertToJsTime(NodaTime.Instant)">
            <summary>
            轉換為Js時間表示
            </summary>
            <param name="instance">時間</param>
            <returns>Js時間表示</returns>
        </member>
        <member name="M:EzCoreKit.NodaTime.InstantFactory.ConvertToInstant(System.Int64)">
            <summary>
            自Js時間表示轉換
            </summary>
            <param name="jsTime">Js時間表示</param>
            <returns>時間</returns>
        </member>
        <member name="M:EzCoreKit.Reflection.MemberInfoExtensions.GetMember``1(``0,System.Linq.Expressions.Expression{System.Action})">
            <summary>
            取得指定成員資訊
            </summary>
            <typeparam name="T">類別</typeparam>
            <param name="instance">物件實體</param>
            <param name="expression">Lambda運算式(建構子、無回傳值靜態方法)</param>
            <returns>成員資訊</returns>
        </member>
        <member name="M:EzCoreKit.Reflection.MemberInfoExtensions.GetMember(System.Type,System.Linq.Expressions.Expression{System.Action})">
            <summary>
            取得指定成員資訊
            </summary>
            <param name="instance">物件實體</param>
            <param name="expression">Lambda運算式(建構子、無回傳值靜態方法)</param>
            <returns>成員資訊</returns>
        </member>
        <member name="M:EzCoreKit.Reflection.MemberInfoExtensions.GetMember``1(``0,System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            取得指定成員資訊
            </summary>
            <typeparam name="T">類別</typeparam>
            <param name="instance">物件實體</param>
            <param name="expression">Lambda運算式(建構子、無回傳值方法)</param>
            <returns>成員資訊</returns>
        </member>
        <member name="M:EzCoreKit.Reflection.MemberInfoExtensions.GetMember``1(System.Type,System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            取得指定成員資訊
            </summary>
            <typeparam name="T">類別</typeparam>
            <param name="instance">物件實體</param>
            <param name="expression">Lambda運算式(建構子、無回傳值方法)</param>
            <returns>成員資訊</returns>
        </member>
        <member name="M:EzCoreKit.Reflection.MemberInfoExtensions.GetMember``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            取得指定成員資訊
            </summary>
            <typeparam name="T">類別</typeparam>
            <param name="instance">物件實體</param>
            <param name="expression">Lambda運算式(建構子、屬性、欄位、索引子、方法)</param>
            <returns>成員資訊</returns>
        </member>
        <member name="M:EzCoreKit.Reflection.MemberInfoExtensions.GetMember``1(System.Type,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            取得指定成員資訊
            </summary>
            <typeparam name="T">類別</typeparam>
            <param name="instance">物件實體</param>
            <param name="expression">Lambda運算式(建構子、屬性、欄位、索引子、方法)</param>
            <returns>成員資訊</returns>
        </member>
        <member name="M:EzCoreKit.Reflection.MethodInfoExtensions.Invoke(System.Reflection.MethodBase,System.Object[])">
            <summary>
            用指定的參數，叫用目前執行個體所表示的方法或建構函式。
            </summary>
            <param name="methodBase"></param>
            <param name="parameters">參數</param>
            <returns>結果</returns>
        </member>
        <member name="M:EzCoreKit.Reflection.MethodInfoExtensions.Invoke(System.Reflection.MethodInfo,System.Type[],System.Object[])">
            <summary>
            用指定的參數與泛型參數，叫用目前執行個體所表示的方法或建構函式。
            </summary>
            <param name="methodBase"></param>
            <param name="genericTypes">泛型參數</param>
            <param name="parameters">參數</param>
            <returns>結果</returns>
        </member>
        <member name="M:EzCoreKit.Reflection.MethodInfoExtensions.AsInvoke(System.Reflection.MemberInfo,System.Object,System.Object@,System.Object[])">
            <summary>
            嘗試將MemberInfo轉換為MethodInfo並用指定的參數，叫用目前執行個體所表示的方法或建構函式。
            </summary>
            <param name="info"></param>
            <param name="instance">實體</param>
            <param name="result">結果</param>
            <param name="parameters">參數</param>
            <returns>是否成功引動</returns>
        </member>
        <member name="M:EzCoreKit.Reflection.MethodInfoExtensions.ToDelegate(System.Reflection.MethodInfo,System.Object)">
            <summary>
            將目前執行個體所表示的方法或建構函式轉換為Func委派。
            </summary>
            <param name="info"></param>
            <param name="instance">實體</param>
            <returns>結果</returns>
        </member>
        <member name="M:EzCoreKit.Threading.TaskFactory.LimitedTask(System.Action,System.Int32)">
            <summary>
            等待<see cref="T:System.Action"/>物件在指定的毫秒限制內完成執行，否則強制結束。
            </summary>
            <param name="action">要執行的動作委派</param>
            <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為<see cref="F:System.Threading.Timeout.Infinite"/>(-1)。</param>
            <returns>委派是否在指定的毫秒內完成執行</returns>
        </member>
    </members>
</doc>
